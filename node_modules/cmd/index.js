/* Основа консольного приложения */
var cmd = function () {
	/* Инициализируем приложение */
	this.init();
};

/* Лист консольных комманд */
cmd.prototype.list = {};
/* Описание комманды */
cmd.prototype.listDesc = {};
/* Префексы */
cmd.prototype.prefix = {
	app: 'app',
	use: 'use'
};

/* Создаём интерфейс */
cmd.prototype.rl = require('readline').createInterface({
	input: process.stdin,
	output: process.stdout,
	terminal: false
});

/* Установка дефолтных комманд */
cmd.prototype.commands = function () {
	/* Для анонимных функций */
	var self = this;

	/* Выведет все команды и описание по возможности */
	this.add('help', function () {
		for (key in self.list) {
			/* Добавляем описание */
			if (self.listDesc[key]) {
				var desc = self.listDesc[key];
			} else var desc = 'Описание отсутствует';

			/* Выводим команду */
			self.out(key + ' - ' + desc);
		}
	}, 'Выводит список всех команд');

	/* Выход из приложения */
	this.add('exit', function () {
		console.log('Выход...');
		process.exit(0);
	}, 'Выход из приложения');
};

/* Инициализация консоли */
cmd.prototype.init = function () {
	/* Установка стандартных комманд */
	this.commands();

	/* Устанавливаем EventEmmiter */
	this.once();
};

/* Добавляем команду */
cmd.prototype.add = function (cmd, callback, desc) {
	/* Добавляем команду */
	this.list[cmd] = callback;

	/* Есть ли есть описание добавляем */
	if (desc) {
		this.listDesc[cmd] = desc;
	}
};
/* Удаляем команду */
cmd.prototype.del = function (cmd) {
	/* Удаляем команду */
	delete this.list[cmd];

	/* Если есть описание удаляем и его */
	if (this.listDesc[cmd]) {
		delete this.listDesc[cmd];
	}
};

/* Обработчик вызова */
cmd.prototype.out = function (text, name) {
	/* Если есть название */
	if (name) {
		var pref = name;
	} else var pref = this.prefix.app;

	/* Добавляем префикс и выводим */
	this.rl.setPrompt(pref + '> ');
	this.rl.prompt();
	this.rl.output.write(text + '\n');
};

/* Установка префикса для юзера */
cmd.prototype.pref = function () {
	this.rl.setPrompt(this.prefix.use + '> ');
	this.rl.prompt();
};

/* Вызов комманды вручную */
cmd.prototype.exec = function (cmd) {
	if (this.list[cmd]) {
		/* Регулярка на проверку */
		var regexp = new RegExp('^' + cmd + '$');
		/* Вызываем регулярное выражение */
		var match = cmd.match(regexp);

		/* Вызываем комманду */
		this.list[cmd](match);
	} else {
		this.out('Неизвестная команда, попробуйте "help"');
	}

	this.pref();
};

/* Работа с EventEmmiter */
cmd.prototype.once = function () {
	/* Алиас текущего объекта */
	var self = this;

	this.rl.on('line', function (text) {
		/* Удаляем пробелы по бокам */
		var text = text.trim();
		/* Было ли вызвана комманда */
		var check = false;

		/* Перебираем объект */
		for (var key in self.list) {
			/* Регулярка на проверку */
			var regexp = new RegExp('^' + key + '$');
			/* Вызываем регулярное выражение */
			var match = text.match(regexp);

			/* Регулярное выражение соотвествует ? */
			if (match) {
				/* Вызываем и передаём данные из строки */
				self.list[key].apply(self, match.slice(1));
				/* Указываем что вызвано */
				check = true;
				/* Останавливаем цикл */
				break;
			}
		}

		/* Если варианты выше не подошли */
		if (check === false) {
			self.out('Неизвестная команда, попробуйте "help"');
		}

		self.pref();
	});
};

/* Экспортируем модуль */
module.exports = new cmd();